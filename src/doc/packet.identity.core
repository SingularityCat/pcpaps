Help on module packet.identity.core in packet.identity:

NAME
    packet.identity.core

DESCRIPTION
    core: root module of identification system
    Contains class definition for a 'Stream'.
    Contains abstract class definition for Protocol and CarrierProtocol.

CLASSES
    builtins.Exception(builtins.BaseException)
        ProtocolFormatError
    builtins.object
        Protocol
            CarrierProtocol
            ProtocolStub
        Stream
    enum.Enum(builtins.object)
        AddrType
    
    class AddrType(enum.Enum)
     |  Method resolution order:
     |      AddrType
     |      enum.Enum
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  IP4 = <AddrType.IP4: 'ip4'>
     |  
     |  IP6 = <AddrType.IP6: 'ip6'>
     |  
     |  MAC = <AddrType.MAC: 'mac'>
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from enum.Enum:
     |  
     |  name
     |      The name of the Enum member.
     |  
     |  value
     |      The value of the Enum member.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from enum.EnumMeta:
     |  
     |  __members__
     |      Returns a mapping of member name->value.
     |      
     |      This mapping lists all enum members, including aliases. Note that this
     |      is a read-only view of the internal mapping.
    
    class CarrierProtocol(Protocol)
     |  This class represents a protocol that carries other protocols.
     |  In addition to the Protocol methods, a CarrierProtocol needs to implement
     |  the get_route and get_route_reciprocal methods.
     |  
     |  Method resolution order:
     |      CarrierProtocol
     |      Protocol
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get_payload_length(self)
     |      Abstract method returning the lengh of the payload,
     |      if indicated in the protocol.
     |  
     |  get_route(self)
     |      Abstract method returning a hashable object that represents
     |      the 'route' (the destination, source and direction) a carrier
     |      protocol would direct a packet.
     |  
     |  get_route_reciprocal(self)
     |      Abstract method returning a hashable object not unlike the above,
     |      that returns the opposite route.
     |      E.g. if get_route returned A -> B, this should return B -> A.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Protocol:
     |  
     |  __init__(self, data, prev)
     |      Constructor for protocol instances.
     |  
     |  __iter__(self)
     |      Generator method for accessing this/child protocol instances.
     |  
     |  get_attributes(self)
     |      Abstract method get_attributes.
     |      Should return a dict of useful attributes.
     |  
     |  is_complete(self)
     |      Returns True if this and all child protocols are complete.
     |  
     |  match_attributes(self, tattrs)
     |      Tests wether this ProtocolIdentity matches a set of attributes.
     |      This is the default implementation and compares attributes of this
     |      instance (from get_attributes) to the provided attributes (tattrs).
     |      This is not commutative - all of the target keys MUST be in
     |      this ProtocolIdentity's keys. Additionally, if the target's key is
     |      equal to None, it is treated as a wildcard and matches.
     |  
     |  recalculate_checksums(self)
     |      This method should recalculate any kind of checksum used by this
     |      protocol, after any 'child' checksums have been recomputed.
     |      That is to say, the recalculation should propagate up, from the
     |      highest-level protocol to the lowest. The default implementation does
     |      nothing other then this propogation and should suffice for
     |      protocols without validation.
     |  
     |  replace_hosts(self, hostmap)
     |      This method should replace instances of host identification,
     |      namely IP addresses and MAC addresses.
     |      This operation should propagate to child protocols.
     |      The default implementation does nothing other then this propogation
     |      and should suffice for protocols without any kind of host identification.
     |  
     |  set_attributes(self, attrs)
     |      Abstract method set_attributes.
     |      Should accept a dict of attributes and update data accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Protocol:
     |  
     |  build_attributes(attrstr)
     |      Abstract static method build_attributes.
     |      Should return a dict of attributes based on a human-readable
     |      expression string.
     |  
     |  interpret_packet(data, parent)
     |      Abstract static method interpret_packet.
     |      This takes two arguments, a 'parent' protocol instance
     |      (which can be none) and data.
     |      This should create an instance of it's class, determine the next
     |      (if any) protocol to interpret (setting the next field), then
     |      return said instance.
     |  
     |  interpret_stream(stream, parent)
     |      Abstract static method interpret_stream.
     |      Like interpret_packet, this takes two arguments, a 'parent' protocol
     |      instance (which can be none) and a 'stream' object.
     |      This method should create an instance of it's class, determine the next
     |      (if any) protocol to interpret, (setting the next field), then
     |      return said instance.
     |  
     |  reset_state()
     |      This static method should restore the initial state to any kind of
     |      state tracker this class uses. This means, any data held by the class
     |      to associate multiple bits of data (think IP fragmentation or TCP)
     |      should be forgotten.
     |      The default implementation does nothing and should suffice for simple protocols.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Protocol:
     |  
     |  completed
     |  
     |  data
     |  
     |  next
     |  
     |  prev
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Protocol:
     |  
     |  name = None
    
    class Protocol(builtins.object)
     |  This class represents a protocol.
     |  An instance of a protocol has a set of 'attributes', such as
     |  fields in the header of a packet. An attribute is a smaller piece
     |  of variable data in a protocol, for instance, a sender's IP address
     |  is an attribute of an IP header. A protocol also has a 'next' and 'prev' - 
     |  child and parent protocols, respectively.
     |  All protocol instances have a 'completed' flag.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, data, prev)
     |      Constructor for protocol instances.
     |  
     |  __iter__(self)
     |      Generator method for accessing this/child protocol instances.
     |  
     |  get_attributes(self)
     |      Abstract method get_attributes.
     |      Should return a dict of useful attributes.
     |  
     |  is_complete(self)
     |      Returns True if this and all child protocols are complete.
     |  
     |  match_attributes(self, tattrs)
     |      Tests wether this ProtocolIdentity matches a set of attributes.
     |      This is the default implementation and compares attributes of this
     |      instance (from get_attributes) to the provided attributes (tattrs).
     |      This is not commutative - all of the target keys MUST be in
     |      this ProtocolIdentity's keys. Additionally, if the target's key is
     |      equal to None, it is treated as a wildcard and matches.
     |  
     |  recalculate_checksums(self)
     |      This method should recalculate any kind of checksum used by this
     |      protocol, after any 'child' checksums have been recomputed.
     |      That is to say, the recalculation should propagate up, from the
     |      highest-level protocol to the lowest. The default implementation does
     |      nothing other then this propogation and should suffice for
     |      protocols without validation.
     |  
     |  replace_hosts(self, hostmap)
     |      This method should replace instances of host identification,
     |      namely IP addresses and MAC addresses.
     |      This operation should propagate to child protocols.
     |      The default implementation does nothing other then this propogation
     |      and should suffice for protocols without any kind of host identification.
     |  
     |  set_attributes(self, attrs)
     |      Abstract method set_attributes.
     |      Should accept a dict of attributes and update data accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  build_attributes(attrstr)
     |      Abstract static method build_attributes.
     |      Should return a dict of attributes based on a human-readable
     |      expression string.
     |  
     |  interpret_packet(data, parent)
     |      Abstract static method interpret_packet.
     |      This takes two arguments, a 'parent' protocol instance
     |      (which can be none) and data.
     |      This should create an instance of it's class, determine the next
     |      (if any) protocol to interpret (setting the next field), then
     |      return said instance.
     |  
     |  interpret_stream(stream, parent)
     |      Abstract static method interpret_stream.
     |      Like interpret_packet, this takes two arguments, a 'parent' protocol
     |      instance (which can be none) and a 'stream' object.
     |      This method should create an instance of it's class, determine the next
     |      (if any) protocol to interpret, (setting the next field), then
     |      return said instance.
     |  
     |  reset_state()
     |      This static method should restore the initial state to any kind of
     |      state tracker this class uses. This means, any data held by the class
     |      to associate multiple bits of data (think IP fragmentation or TCP)
     |      should be forgotten.
     |      The default implementation does nothing and should suffice for simple protocols.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  completed
     |  
     |  data
     |  
     |  next
     |  
     |  prev
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  name = None
    
    class ProtocolFormatError(builtins.Exception)
     |  Exception raised when a protocol class encounters an error dissecting a packet.
     |  
     |  Method resolution order:
     |      ProtocolFormatError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class ProtocolStub(Protocol)
     |  Protocol class for 'stub' handlers - protocols in name only.
     |  This class doubles as the definition for the 'unknown' protocol.
     |  
     |  Method resolution order:
     |      ProtocolStub
     |      Protocol
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get_attributes(self)
     |      Stub. Returns an empty dictionary.
     |  
     |  match_attributes(self, attrs)
     |      Stub. Always returns true.
     |  
     |  set_attributes(self, attrs)
     |      Stub. Does nothing.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  interpret_packet(data, parent) from builtins.type
     |      Stub. Returns an instance of this class.
     |  
     |  interpret_stream(stream, parent) from builtins.type
     |      Stub. Returns an instance of this class.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  build_attributes(attrstr)
     |      Stub. Returns an empty dictionary.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  name = 'unknown'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Protocol:
     |  
     |  __init__(self, data, prev)
     |      Constructor for protocol instances.
     |  
     |  __iter__(self)
     |      Generator method for accessing this/child protocol instances.
     |  
     |  is_complete(self)
     |      Returns True if this and all child protocols are complete.
     |  
     |  recalculate_checksums(self)
     |      This method should recalculate any kind of checksum used by this
     |      protocol, after any 'child' checksums have been recomputed.
     |      That is to say, the recalculation should propagate up, from the
     |      highest-level protocol to the lowest. The default implementation does
     |      nothing other then this propogation and should suffice for
     |      protocols without validation.
     |  
     |  replace_hosts(self, hostmap)
     |      This method should replace instances of host identification,
     |      namely IP addresses and MAC addresses.
     |      This operation should propagate to child protocols.
     |      The default implementation does nothing other then this propogation
     |      and should suffice for protocols without any kind of host identification.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from Protocol:
     |  
     |  reset_state()
     |      This static method should restore the initial state to any kind of
     |      state tracker this class uses. This means, any data held by the class
     |      to associate multiple bits of data (think IP fragmentation or TCP)
     |      should be forgotten.
     |      The default implementation does nothing and should suffice for simple protocols.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Protocol:
     |  
     |  completed
     |  
     |  data
     |  
     |  next
     |  
     |  prev
    
    class Stream(builtins.object)
     |  This class represents a 'stream'.
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    lookup_protocol(protoname)
        This finds a protocol class by it's name.
        All protocol classes should be referred to by name. This allows them to be
        overridden by simply registering a different class with the same name.
    
    register_linktype(protoname, linktype)
        This function adds a protocol to the linktype registry.
        The linktype registry determines what protocol class to use first.
        Protocols in this registry would correspond to the valus of linktypes
        defined in packet.common.LinkType
    
    register_protocol(protocol)
        This function adds a protocol to the protocol registry.
        The protocol registry maps a protocol's name to it's class.
    
    root_identify(packet)
        Identify a packet.
        This function may have side effects.
        This function will set the packet.identity field to a protocol instance.
        This function may return packets with an incomplete identity (is_complete() == False).
        Packets with an incomplete identity can and will have their identities
        updated whenever a protocol class deems suitable.
    
    uint16pack(i)
        Converts a 16-bit int into bytes (big endian)
    
    uint16unpack(b)
        Converts bytes into a 16-bit int (big endian)
    
    uint32pack(i)
        Converts a 32-bit int into bytes (big endian)
    
    uint32unpack(b)
        Converts bytes into a 32-bit int (big endian)

DATA
    ATTRIBUTE_WILDCARD = None
    linktype_registry = {1: 'eth', 228: 'ip4', 229: 'ip6'}
    protocol_registry = {'arp': <class 'packet.identity.arp.ARP'>, 'eth': ...
    uint16 = <Struct object>
    uint32 = <Struct object>
