#!/usr/bin/env python3

# PCPAPU - Packet Capture Processor And Publising Utility

"""
PCPAPU - Packet Capture Processor And Publishing Utility
This module/program contains code used for the interactive tool pcpapu.
Should the tool need to be extended without modifying this file,
it can be imported and extended programatically.
"""
import sys
import argparse

import time

import readline
import code

from packet import common
from packet.capfile import pcap

from packet.identity.core import AddrType
from packet.identity.core import lookup_protocol

from packet.pipeline.merge import merge
from packet.pipeline.identify import identify
from packet.pipeline.filter import filter, KEEP, DISCARD


def build_prototype_list(attrdefstrs):
    attrlist = []
    for attrdefstr in attrdefstrs.split("/"):
        protoname, _, attrstr = attrdefstr.partition(":")
        protocol = lookup_protocol(protoname)
        attrlist.append((protocol.name, protocol.build_attributes(attrstr)))
    return attrlist


def build_ip4_pair(rep):
    a, b = rep.split("=")
    return common.ip4_str2bin(a), common.ip4_str2bin(b)


def build_ip6_pair(rep):
    a, b = rep.split("=")
    return common.ip6_str2bin(a), common.ip6_str2bin(b)


def build_mac_pair(rep):
    a, b = rep.split("=")
    return common.mac_str2bin(a), common.mac_str2bin(b)


def merge_prog(argv):
    # Set up the argument parser.
    parser = argparse.ArgumentParser(prog="{0} {1}".format(argv[0], argv[1]), description="Merge packet captures and adjust their times.")
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="inpaths", action="append", help="Input files")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outpath", action="store", help="Output file")
    parser.add_argument("-r", "--relative", dest="relative", action="store_const", const=True, default=True, help="Use relative times. (Default)")
    parser.add_argument("-a", "--absolute", dest="relative", action="store_const", const=False, default=True, help="Do not use relative times.")
    parser.add_argument("-t", "--time-offset", type=(lambda d: time.mktime(time.strptime(d, "%Y/%m/%d %H:%M:%S"))), dest="time_offset", action="store", default=None, help="Time offset, in Y/M/D H:M:S format.")
    # Y/M/D H:M:S == "%Y/%m/%d %H:%M:%S"

    arguments = parser.parse_args(argv[2:])

    if arguments.inpaths == None:
        arguments.inpaths = [sys.stdin.buffer]
    if arguments.outpath == None:
        arguments.outpath = sys.stdout.buffer

    sources = [pcap.PcapReader(src) for src in arguments.inpaths]
    destination = pcap.PcapWriter(arguments.outpath)

    for packet in merge(sources, arguments.relative, arguments.time_offset):
        destination.write_packet(packet)


def filter_prog(argv):
    def interpret_policy(polstr):
        polstr = polstr.lower()
        if polstr.startswith("d"):
            return DISCARD
        else:
            return KEEP

    parser = argparse.ArgumentParser(prog="{0} {1}".format(argv[0], argv[1]), description="Filter packets from a capture.")
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="infile", action="store", help="Input file")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outfile", action="store", help="Output file")
    parser.add_argument("-k", "--keep", type=build_prototype_list, dest="keep_set", action="append", help="")
    parser.add_argument("-d", "--discard", type=build_prototype_list, dest="discard_set", action="append", help="")
    parser.add_argument("-p", "--policy", type=interpret_policy, dest="policy", action="store", choices={DISCARD, KEEP}, default=KEEP, help="")

    arguments = parser.parse_args(argv[2:])

    if arguments.infile == None:
        arguments.infile = sys.stdin.buffer
    if arguments.outfile == None:
        arguments.outfile = sys.stdout.buffer

    source = pcap.PcapReader(arguments.infile)
    destination = pcap.PcapWriter(arguments.outfile)

    for packet in filter(identify(source), keep=arguments.keep_set, discard=arguments.discard_set, policy=arguments.policy):
        destination.write_packet(packet)

    destination.close()


def maphosts_prog(argv):
    parser = argparse.ArgumentParser(prog="{0} {1}".format(argv[0], argv[1]), description="Replace host identities inside packets from a capture.")
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="infile", action="store", help="Input file")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outfile", action="store", help="Output file")
    parser.add_argument("-4", "--ip4", type=build_ip4_pair, dest="ip4_pairs", action="append", default=[], help="")
    parser.add_argument("-6", "--ip6", type=build_ip6_pair, dest="ip6_pairs", action="append", default=[], help="")
    parser.add_argument("-m", "--mac", type=build_mac_pair, dest="mac_pairs", action="append", default=[],help="")

    arguments = parser.parse_args(argv[2:])

    if arguments.infile == None:
        arguments.infile = sys.stdin.buffer
    if arguments.outfile == None:
        arguments.outfile = sys.stdout.buffer

    source = pcap.PcapReader(arguments.infile)
    destination = pcap.PcapWriter(arguments.outfile)

    hostmap = {
        AddrType.IP4.value : dict(pair for pair in arguments.ip4_pairs if pair[0] is not None and pair[1] is not None),
        AddrType.IP6.value : dict(pair for pair in arguments.ip6_pairs if pair[0] is not None and pair[1] is not None),
        AddrType.MAC.value : dict(pair for pair in arguments.mac_pairs if pair[0] is not None and pair[1] is not None)
    }

    for packet in identify(source):
        if packet.identity is not None:
            packet.identity.replace_hosts(hostmap)
            packet.identity.recalculate_checksums()

        destination.write_packet(packet)

# Logical program entry point.
if __name__ == "__main__":
    progs = {
        "merge": merge_prog,
        "filter": filter_prog,
        "maphosts": maphosts_prog
    }

    parser = argparse.ArgumentParser(prog=sys.argv[0], description="Packet Caputre Processor And Publishing Utility.")
    parser.add_argument("-l", "--load", dest="load", action="append", help="")
    parser.add_argument(dest="prog", choices=progs.keys(), action="store", help="subcommand")
    parser.add_argument(dest="args", nargs=argparse.REMAINDER, action="store", help="subcommand arguments")
    args = parser.parse_args(sys.argv[1:])



    progs[args.prog[1]](sys.argv)

