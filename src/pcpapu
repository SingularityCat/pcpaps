#!/usr/bin/env python3

# PCPAPU - Packet Capture Processor And Publising Utility

"""
PCPAPU - Packet Capture Processor And Publishing Utility
This module/program contains code used for the interactive tool pcpapu.
Should the tool need to be extended without modifying this file,
it can be imported and extended programatically.
"""
import sys
import argparse

import time

import packet

from packet import common
from packet.capfile import pcap

from packet.identity.core import AddrType, register_protocol, lookup_protocol

from packet.pipeline.merge import merge
from packet.pipeline.identify import identify
from packet.pipeline.filter import filter, KEEP, DISCARD


def build_prototype_list(attrdefstrs):
    attrlist = []
    for attrdefstr in attrdefstrs.split("/"):
        protoname, _, attrstr = attrdefstr.partition(":")
        protocol = lookup_protocol(protoname)
        attrlist.append((protocol.name, protocol.build_attributes(attrstr)))
    return attrlist


def build_ip4_pair(rep):
    a, b = rep.split("=")
    return common.ip4_str2bin(a), common.ip4_str2bin(b)


def build_ip6_pair(rep):
    a, b = rep.split("=")
    return common.ip6_str2bin(a), common.ip6_str2bin(b)


def build_mac_pair(rep):
    a, b = rep.split("=")
    return common.mac_str2bin(a), common.mac_str2bin(b)


def merge_prog(name, argv):
    # Set up the argument parser.
    parser = argparse.ArgumentParser(prog=name, description="Merge packet captures and adjust their times.")
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="inpaths", action="append", metavar="filepath", help="Input file (can occur multiple times)")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outpath", action="store", metavar="filepath", help="Output file")
    parser.add_argument("-r", "--relative", dest="relative", action="store_true", default=True, help="Use relative times. (Default)")
    parser.add_argument("-a", "--absolute", dest="relative", action="store_false", help="Do not use relative times.")
    parser.add_argument("-t", "--time-offset", type=(lambda d: time.mktime(time.strptime(d, "%Y/%m/%d %H:%M:%S"))), dest="time_offset", action="store", default=None, metavar="time", help="Time offset, in Y/M/D H:M:S format.")
    # Y/M/D H:M:S == "%Y/%m/%d %H:%M:%S"

    arguments = parser.parse_args(argv)

    if arguments.inpaths == None:
        arguments.inpaths = [sys.stdin.buffer]
    if arguments.outpath == None:
        arguments.outpath = sys.stdout.buffer

    sources = [pcap.PcapReader(src) for src in arguments.inpaths]
    destination = pcap.PcapWriter(arguments.outpath)

    for packet in merge(sources, arguments.relative, arguments.time_offset):
        destination.write_packet(packet)


def filter_prog(name, argv):
    def interpret_policy(polstr):
        polstr = polstr.lower()
        if polstr.startswith("d"):
            return DISCARD
        else:
            return KEEP
    helptext = """Filter packets from a capture.
Identities have the form:
<identity> ::= <prototype> | <prototype> / <identity>
<prototype> ::= <protocol name> | <protocol name> : <protocol attributes>
For example, to identify any ethernet packet carrying TCP over IP: /eth/ip4/tcp
More specific identities can be specified.
For example, /eth:dmac=30:21:af:42:73:30/ip4
will match all ethernet/IPv4 packets with that destination MAC address.
"""
    parser = argparse.ArgumentParser(prog=name, formatter_class=argparse.RawDescriptionHelpFormatter, description=helptext)
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="infile", action="store",
        metavar="filepath", help="Input file")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outfile", action="store",
        metavar="filepath", help="Output file")
    parser.add_argument("-k", "--keep", type=build_prototype_list, dest="keep_set", action="append",
        metavar="identity", help="Packets matching this identity will be kept.")
    parser.add_argument("-d", "--discard", type=build_prototype_list, dest="discard_set", action="append",
        metavar="identity", help="Packets matching this identity will be discarded.")
    parser.add_argument("-p", "--policy", type=interpret_policy, dest="policy", action="store", choices={"discard", "keep"}, default="keep",
        metavar="keep/discard", help="The policy for any packet not matching an identity. (Default is keep)")

    arguments = parser.parse_args(argv)

    if arguments.infile == None:
        arguments.infile = sys.stdin.buffer
    if arguments.outfile == None:
        arguments.outfile = sys.stdout.buffer

    source = pcap.PcapReader(arguments.infile)
    destination = pcap.PcapWriter(arguments.outfile)

    for packet in filter(identify(source), keep=arguments.keep_set, discard=arguments.discard_set, policy=interpet_policy(arguments.policy)):
        destination.write_packet(packet)

    destination.close()


def maphosts_prog(name, argv):
    parser = argparse.ArgumentParser(prog=name, description="Replace host identities inside packets from a capture.")
    parser.add_argument("-i", "--in", type=argparse.FileType("rb"), dest="infile", action="store", metavar="filepath", help="Input file")
    parser.add_argument("-o", "--out", type=argparse.FileType("wb"), dest="outfile", action="store", metavar="filepath", help="Output file")
    parser.add_argument("-4", "--ip4", type=build_ip4_pair, dest="ip4_pairs", action="append", default=[], metavar="IP4-pair", help="IPv4 address find/replace pair.")
    parser.add_argument("-6", "--ip6", type=build_ip6_pair, dest="ip6_pairs", action="append", default=[], metavar="IP6-pair", help="IPv6 address find/replace pair.")
    parser.add_argument("-m", "--mac", type=build_mac_pair, dest="mac_pairs", action="append", default=[], metavar="MAC-pair", help="MAC address find/replace pair.")

    arguments = parser.parse_args(argv)

    if arguments.infile == None:
        arguments.infile = sys.stdin.buffer
    if arguments.outfile == None:
        arguments.outfile = sys.stdout.buffer

    source = pcap.PcapReader(arguments.infile)
    destination = pcap.PcapWriter(arguments.outfile)

    hostmap = {
        AddrType.IP4.value : dict(pair for pair in arguments.ip4_pairs if pair[0] is not None and pair[1] is not None),
        AddrType.IP6.value : dict(pair for pair in arguments.ip6_pairs if pair[0] is not None and pair[1] is not None),
        AddrType.MAC.value : dict(pair for pair in arguments.mac_pairs if pair[0] is not None and pair[1] is not None)
    }

    for packet in identify(source):
        if packet.identity is not None:
            packet.identity.replace_hosts(hostmap)
            packet.identity.recalculate_checksums()

        destination.write_packet(packet)

# Logical program entry point.
if __name__ == "__main__":
    progs = {
        "merge": merge_prog,
        "filter": filter_prog,
        "maphosts": maphosts_prog
    }

    parser = argparse.ArgumentParser(prog=sys.argv[0], description="Packet Caputre Processor And Publishing Utility.")
    parser.add_argument("-l", "--load", dest="load", action="append", default=[], help="")
    parser.add_argument(dest="prog", choices=progs.keys(), action="store", help="subcommand")
    parser.add_argument(dest="args", nargs=argparse.REMAINDER, action="store", help="subcommand arguments")
    args = parser.parse_args(sys.argv[1:])

    # Load modules.
    for mod_path in args.load:
        try:
            mod_file = open(mod_path, "r")
            mod_code = mod_file.read()
            mod = compile(mod_code, mod_path, "exec")
            exec(mod, {"packet" : packet})
        except FileNotFoundError:
            print("Error: {0} no such file or directory.".format(mod_path), file = sys.stderr)
        except SyntaxError as err:
            print("Error: Could not load {0};".format(mod_path), file = sys.stderr)
            print(err, file = sys.stderr)

    progs[args.prog](sys.argv[0] + " " + args.prog, args.args)

